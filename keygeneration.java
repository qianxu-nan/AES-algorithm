class Keygeneration
{	
	public static int[] key16(int[] xc,int round )
	{
		int [][] keyround=new int[16][8];
		for(int a=0; a<16;a++)
		{
			int temp1 = xc[a];
			for (int b=0; b<8;b++)
				{   
					keyround[a][7-b]= temp1&1;
					temp1 =temp1>>>1;
				}
		}
		int[] keyround_0=new int[128];
		for(int e= 0; e< 16; e ++)
			{
				for(int f = 0; f< 8; f ++) 
					{
						keyround_0[e * 8 + f] = keyround[e][f];
					}	
			}
		
	
		
//	****************************************************************************
	//Circular byte left Shift the last word of the Round-0 Key to get A:
		int[] temp2=new int[8];
		for(int z9=0; z9<8; z9++)
		{
			temp2[z9]=keyround[12][z9];
		}
		
		for(int z2=0; z2<8; z2++)
		{
			keyround[12][z2]=keyround[13][z2];
			keyround[13][z2]=keyround[14][z2];
			keyround[14][z2]=keyround[15][z2];
			keyround[15][z2]=temp2[z2];
		}
//**********************************************************************************
//	 Byte Substitution (S-Box): (B7;5A;9D;85)  --- B:	
		int[][]s_box=  {{0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76},
					  {0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0},
					  {0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15},
					  {0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75},
					  {0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84},
					  {0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf},
					  {0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8},
					  {0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2},
					  {0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x10,0x73},
					  {0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb},
					  {0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79},
					  {0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08},
					  {0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a},
					  {0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e},
					  {0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf},
		              {0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16}};
		
		int[]row=new int[4];
		int[]column=new int[4];
		
		row[0]=keyround[12][0]*8+keyround[12][1]*4+keyround[12][2]*2+keyround[12][3];
		row[1]=keyround[13][0]*8+keyround[13][1]*4+keyround[13][2]*2+keyround[13][3];
		row[2]=keyround[14][0]*8+keyround[14][1]*4+keyround[14][2]*2+keyround[14][3];
		row[3]=keyround[15][0]*8+keyround[15][1]*4+keyround[15][2]*2+keyround[15][3];
		
		column[0]=keyround[12][4]*8+keyround[12][5]*4+keyround[12][6]*2+keyround[12][7];
		column[1]=keyround[13][4]*8+keyround[13][5]*4+keyround[13][6]*2+keyround[13][7];
		column[2]=keyround[14][4]*8+keyround[14][5]*4+keyround[14][6]*2+keyround[14][7];
		column[3]=keyround[15][4]*8+keyround[15][5]*4+keyround[15][6]*2+keyround[15][7];
		
		int[]B=new int[4];
		for(int xm=0; xm<4;xm++)
		{
			B[xm]=s_box[row[xm]][column[xm]];
		}
//************************************************************************************************
//Adding round constant : T
		int[]T=new int[4];
		int[][]R1={{1,0,0,0},{2,0,0,0},{4,0,0,0},{8,0,0,0},{16,0,0,0},{32,0,0,0},{64,0,0,0},{128,0,0,0},{27,0,0,0},{54,0,0,0}};
		for(int y=0; y<4;y++)
		{
			T[y]=B[y]^R1[round][y];
			
		}
//********************************************************
// round1 keyround
		int[]w4=new int[4];
		for(int x1=0; x1<4; x1++)
		{
			w4[x1]=xc[x1]^T[x1];
		}
			int[]w5=new int[4];
		for(int x2=0; x2<4; x2++)
		{
			w5[x2]=xc[x2+4]^w4[x2];
		}
			int[]w6=new int[4];
		for(int x3=0; x3<4; x3++)
		{
			w6[x3]=xc[x3+8]^w5[x3];
		}
		
			int[]w7=new int[4];
		for(int x4=0; x4<4; x4++)
		{
			w7[x4]=xc[x4+12]^w6[x4];
		}
		int[]subkey= new int[16];
		for(int x5=0; x5<4; x5++)
		{
			subkey[x5]=w4[x5];
			subkey[x5+4]=w5[x5];
			subkey[x5+8]=w6[x5];
			subkey[x5+12]=w7[x5];
		}
	
		return subkey;
	}
	
	
	public static void main(String[] args)
	{
		
		/*String str=args[0];
		byte [] Pasc=str.getBytes();
		int[] Pasc1=new int[16];
		for(int x66=0; x66<16; x66++)
				
		{
			Pasc1[x66]=Pasc[x66];
		}
	
		
			System.out.println("the sub_key for each round:");
			int[][]sub_key=new int[11][16];
			for(int x666=0; x666<16; x666++)
				
		{
			sub_key[0][x666]= Pasc1[x666];
		}
			
			
			sub_key[1]= key16(Pasc1,0);

			for(int x1=2; x1<11; x1++)
			{
				sub_key[x1]= key16(sub_key[x1-1],x1-1);
				
			}*/
	
			
		for(int x6=0; x6<11; x6++)
		{System.out.print("sub_key"+x6+":\t");
			/*for(int x7=0; x7<16; x7++)
			{
			System.out.print(Integer.toHexString(sub_key[x6][x7])+" ");
			}
			System.out.println();
		}*/
	}
}